!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ANSI_BBLUE	ctest.h	/^#define ANSI_BBLUE /;"	d
ANSI_BCYAN	ctest.h	/^#define ANSI_BCYAN /;"	d
ANSI_BGREEN	ctest.h	/^#define ANSI_BGREEN /;"	d
ANSI_BLACK	ctest.h	/^#define ANSI_BLACK /;"	d
ANSI_BLUE	ctest.h	/^#define ANSI_BLUE /;"	d
ANSI_BMAGENTA	ctest.h	/^#define ANSI_BMAGENTA /;"	d
ANSI_BRED	ctest.h	/^#define ANSI_BRED /;"	d
ANSI_BYELLOW	ctest.h	/^#define ANSI_BYELLOW /;"	d
ANSI_CYAN	ctest.h	/^#define ANSI_CYAN /;"	d
ANSI_DARKGREY	ctest.h	/^#define ANSI_DARKGREY /;"	d
ANSI_GREEN	ctest.h	/^#define ANSI_GREEN /;"	d
ANSI_GREY	ctest.h	/^#define ANSI_GREY /;"	d
ANSI_MAGENTA	ctest.h	/^#define ANSI_MAGENTA /;"	d
ANSI_NORMAL	ctest.h	/^#define ANSI_NORMAL /;"	d
ANSI_RED	ctest.h	/^#define ANSI_RED /;"	d
ANSI_WHITE	ctest.h	/^#define ANSI_WHITE /;"	d
ANSI_YELLOW	ctest.h	/^#define ANSI_YELLOW /;"	d
ASSERT_DATA	ctest.h	/^#define ASSERT_DATA(/;"	d
ASSERT_EQUAL	ctest.h	/^#define ASSERT_EQUAL(/;"	d
ASSERT_FAIL	ctest.h	/^#define ASSERT_FAIL(/;"	d
ASSERT_FALSE	ctest.h	/^#define ASSERT_FALSE(/;"	d
ASSERT_NOT_EQUAL	ctest.h	/^#define ASSERT_NOT_EQUAL(/;"	d
ASSERT_NOT_NULL	ctest.h	/^#define ASSERT_NOT_NULL(/;"	d
ASSERT_NULL	ctest.h	/^#define ASSERT_NULL(/;"	d
ASSERT_STR	ctest.h	/^#define ASSERT_STR(/;"	d
ASSERT_TRUE	ctest.h	/^#define ASSERT_TRUE(/;"	d
CCFLAGS	Makefile	/^CCFLAGS=-Wall -Wextra -Wno-unused-parameter -O3$/;"	m
CTEST	ctest.h	/^#define CTEST(/;"	d
CTEST	ctest.h	/^static CTEST(suite, test) { }$/;"	f
CTEST	mytests.c	/^CTEST(ctest, test_assert_equal) {$/;"	f
CTEST	mytests.c	/^CTEST(ctest, test_assert_fail) {$/;"	f
CTEST	mytests.c	/^CTEST(ctest, test_assert_false) {$/;"	f
CTEST	mytests.c	/^CTEST(ctest, test_assert_not_equal) {$/;"	f
CTEST	mytests.c	/^CTEST(ctest, test_assert_not_null) {$/;"	f
CTEST	mytests.c	/^CTEST(ctest, test_assert_not_null_const) {$/;"	f
CTEST	mytests.c	/^CTEST(ctest, test_assert_null) {$/;"	f
CTEST	mytests.c	/^CTEST(ctest, test_assert_str) {$/;"	f
CTEST	mytests.c	/^CTEST(ctest, test_assert_true) {$/;"	f
CTEST	mytests.c	/^CTEST(ctest, test_ctest_err) {$/;"	f
CTEST	mytests.c	/^CTEST(ctest, test_large_numbers) {$/;"	f
CTEST	mytests.c	/^CTEST(ctest, test_null_null) {$/;"	f
CTEST	mytests.c	/^CTEST(ctest, test_null_string) {$/;"	f
CTEST	mytests.c	/^CTEST(ctest, test_string_diff_ptrs) {$/;"	f
CTEST	mytests.c	/^CTEST(ctest, test_string_null) {$/;"	f
CTEST	mytests.c	/^CTEST(suite1, test1) {$/;"	f
CTEST	mytests.c	/^CTEST(suite1, test2) {$/;"	f
CTEST	mytests.c	/^CTEST(suite2, test1) {$/;"	f
CTEST	mytests.c	/^CTEST(suite3, test3) {$/;"	f
CTEST2	ctest.h	/^#define CTEST2(/;"	d
CTEST2	mytests.c	/^CTEST2(fail, test1) {}$/;"	f
CTEST2	mytests.c	/^CTEST2(memtest, test1) {$/;"	f
CTEST2	mytests.c	/^CTEST2(memtest, test2) {$/;"	f
CTEST2	mytests.c	/^CTEST2(nosetup, test1) {$/;"	f
CTEST2	mytests.c	/^CTEST2(weaklinkage, test1) {$/;"	f
CTEST2	mytests.c	/^CTEST2(weaklinkage, test2) {$/;"	f
CTEST2_SKIP	ctest.h	/^#define CTEST2_SKIP(/;"	d
CTEST2_SKIP	mytests.c	/^CTEST2_SKIP(memtest, test3) {$/;"	f
CTEST_DATA	ctest.h	/^#define CTEST_DATA(/;"	d
CTEST_DATA	mytests.c	/^CTEST_DATA(fail) {};$/;"	f
CTEST_DATA	mytests.c	/^CTEST_DATA(memtest) {$/;"	f
CTEST_DATA	mytests.c	/^CTEST_DATA(nosetup) {$/;"	f
CTEST_DATA	mytests.c	/^CTEST_DATA(weaklinkage) {$/;"	f
CTEST_ERR	ctest.h	/^void CTEST_ERR(char *fmt, ...)$/;"	f
CTEST_H	ctest.h	/^#define CTEST_H$/;"	d
CTEST_LOG	ctest.h	/^void CTEST_LOG(char *fmt, ...)$/;"	f
CTEST_MAIN	main.c	/^#define CTEST_MAIN$/;"	d	file:
CTEST_SEGFAULT	main.c	/^#define CTEST_SEGFAULT$/;"	d	file:
CTEST_SETUP	ctest.h	/^#define CTEST_SETUP(/;"	d
CTEST_SETUP	mytests.c	/^CTEST_SETUP(fail) {$/;"	f
CTEST_SETUP	mytests.c	/^CTEST_SETUP(memtest) {$/;"	f
CTEST_SKIP	ctest.h	/^#define CTEST_SKIP(/;"	d
CTEST_SKIP	mytests.c	/^CTEST_SKIP(ctest, test_skip) {$/;"	f
CTEST_TEARDOWN	ctest.h	/^#define CTEST_TEARDOWN(/;"	d
CTEST_TEARDOWN	mytests.c	/^CTEST_TEARDOWN(memtest) {$/;"	f
CTEST_TEARDOWN	mytests.c	/^CTEST_TEARDOWN(nosetup) {$/;"	f
LDFLAGS	Makefile	/^LDFLAGS=-Wl,-flat_namespace,-undefined,dynamic_lookup$/;"	m
MSG_SIZE	ctest.h	/^#define MSG_SIZE /;"	d
SETUP_FNAME	ctest.h	/^#define SETUP_FNAME(/;"	d
SetupFunc	ctest.h	/^typedef void (*SetupFunc)(void*);$/;"	t
TEARDOWN_FNAME	ctest.h	/^#define TEARDOWN_FNAME(/;"	d
TearDownFunc	ctest.h	/^typedef void (*TearDownFunc)(void*);$/;"	t
UNAME	Makefile	/^UNAME=$(shell uname)$/;"	m
__CTEST2_INTERNAL	ctest.h	/^#define __CTEST2_INTERNAL(/;"	d
__CTEST_INTERNAL	ctest.h	/^#define __CTEST_INTERNAL(/;"	d
__CTEST_MAGIC	ctest.h	/^#define __CTEST_MAGIC /;"	d
__CTEST_STRUCT	ctest.h	/^#define __CTEST_STRUCT(/;"	d
__FNAME	ctest.h	/^#define __FNAME(/;"	d
__TNAME	ctest.h	/^#define __TNAME(/;"	d
__Test_Section	ctest.h	/^#define __Test_Section /;"	d
assert_data	ctest.h	/^void assert_data(const unsigned char* exp, int expsize,$/;"	f
assert_equal	ctest.h	/^void assert_equal(long exp, long real, const char* caller, int line) {$/;"	f
assert_fail	ctest.h	/^void assert_fail(const char* caller, int line) {$/;"	f
assert_false	ctest.h	/^void assert_false(int real, const char* caller, int line) {$/;"	f
assert_not_equal	ctest.h	/^void assert_not_equal(long exp, long real, const char* caller, int line) {$/;"	f
assert_not_null	ctest.h	/^void assert_not_null(const void* real, const char* caller, int line) {$/;"	f
assert_null	ctest.h	/^void assert_null(void* real, const char* caller, int line) {$/;"	f
assert_str	ctest.h	/^void assert_str(const char* exp, const char*  real, const char* caller, int line) {$/;"	f
assert_true	ctest.h	/^void assert_true(int real, const char* caller, int line) {$/;"	f
color_output	ctest.h	/^static int color_output = 1;$/;"	v
color_print	ctest.h	/^static void color_print(const char* color, const char* text) {$/;"	f
ctest	ctest.h	/^struct ctest {$/;"	s
ctest_err	ctest.h	/^static jmp_buf ctest_err;$/;"	v
ctest_errorbuffer	ctest.h	/^static char ctest_errorbuffer[MSG_SIZE];$/;"	v
ctest_errormsg	ctest.h	/^static char* ctest_errormsg;$/;"	v
ctest_errorsize	ctest.h	/^static size_t ctest_errorsize;$/;"	v
ctest_main	ctest.h	/^int ctest_main(int argc, const char *argv[])$/;"	f
data	ctest.h	/^    void* data;$/;"	m	struct:ctest
filter_func	ctest.h	/^typedef int (*filter_func)(struct ctest*);$/;"	t
find_symbol	ctest.h	/^static void *find_symbol(struct ctest *test, const char *fname)$/;"	f
getCurrentTime	ctest.h	/^static uint64_t getCurrentTime() {$/;"	f
magic	ctest.h	/^    unsigned int magic;$/;"	m	struct:ctest
main	main.c	/^int main(int argc, const char *argv[])$/;"	f
msg_end	ctest.h	/^static void msg_end() {$/;"	f
msg_start	ctest.h	/^static void msg_start(const char* color, const char* title) {$/;"	f
run	ctest.h	/^    void (*run)();$/;"	m	struct:ctest
setup	ctest.h	/^    SetupFunc setup;$/;"	m	struct:ctest
sighandler	ctest.h	/^static void sighandler(int signum)$/;"	f
skip	ctest.h	/^    int skip;$/;"	m	struct:ctest
ssname	ctest.h	/^    const char* ssname;  \/\/ suite name$/;"	m	struct:ctest
suite_all	ctest.h	/^static int suite_all(struct ctest* t) {$/;"	f
suite_filter	ctest.h	/^static int suite_filter(struct ctest* t) {$/;"	f
suite_name	ctest.h	/^static const char* suite_name;$/;"	v
teardown	ctest.h	/^    TearDownFunc teardown;$/;"	m	struct:ctest
ttname	ctest.h	/^    const char* ttname;  \/\/ test name$/;"	m	struct:ctest
